use argh::FromArgs;
use std::{
    path::PathBuf,
};

use super::method::*;

/// Generate and apply binary patches
#[derive(FromArgs, PartialEq, Debug)]
pub struct Cli {
    #[argh(subcommand)]
    pub cmd: Command,
}

#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand)]
pub enum Command {
    Diff(Diff),
    Patch(Patch),
    Cycle(Cycle),
}

/// Write the diff of two files to a patch file
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "diff")]
pub struct Diff {
    #[argh(positional)]
    pub older: PathBuf,
    
    #[argh(positional)]
    pub newer: PathBuf,
    
    #[argh(positional)]
    pub patch: PathBuf,
    
    /// number of partitions
    #[argh(option, default = "1")]
    pub sort_partitions: usize,
    
    /// compression method to use
    #[argh(option, default = "Method::Deflate")]
    pub method: Method,
    
    /// optionally specify a chunk size
    #[argh(option)]
    pub scan_chunk_size: Option<usize>,
}

/// Apply a patch file generated by this tool
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "patch")]
pub struct Patch {
    #[argh(positional)]
    pub older: PathBuf,
    #[argh(positional)]
    pub patch: PathBuf,
    #[argh(positional)]
    pub output: PathBuf,
    /// compression method to use
    #[argh(option, default = "Method::Deflate")]
    pub method: Method,
}

/// Cycle
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "cycle")]
pub struct Cycle {
    #[argh(positional)]
    pub older: PathBuf,
    #[argh(positional)]
    pub newer: PathBuf,
    /// number of partitions
    #[argh(option, default = "1")]
    pub sort_partitions: usize,
    /// compression method to use
    #[argh(option, default = "Method::Deflate")]
    pub method: Method,
    /// optionally specify a chunk size
    #[argh(option)]
    pub scan_chunk_size: Option<usize>,
}
